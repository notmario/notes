isad1000 <--

# introduction and project planning

software engineering is centered around good programming
practices, and ensuring that software is not built poorly.

if software is built poorly, there may be severe consequences.
- e.g. therac-25 gave fatal doses to patients
- toyota/lexus electric cars suffered from "sudden unintended acceleration" (Ooops.)

it involves multiple parts, one of which is the actual implementation.
these parts include designing, coordinating, planning, and testing.


## software development life cycles and software project planning methods

the "software development life cycle" is the idea that
software projects are divided into different kinds of activities:
- gathering requirements
- designing the system
- implementing the system
- testing and inspecting
- maintaining it

these are sometimes called "phases", but they aren't
necessarily done in that order

there are several models for life cycles. they fall into several categories:
- predictive: planning occurs up front, then all is done in one go
- iterative: allows for feedback on unfinished work (e.g. iterative waterfall)
- incremental: allows finished deliverables to go to customers (e.g. spiral)
- agile: both iterative and incremental, to allow for faster delivery

### iterative waterfall

has components "requirements", "design", "implementation",
"testing", and "maintenance/operations". you may progress
through them, but going back to adjust prior stages is 
permitted (backtracking).

### spiral model

this model divides a project into four sections, which are
repeated over several "cycles" (iterations).

- set objectives and identify options
- evaluate options and risks
- develop and verify
- plan next iteration

each cycle accomplishes something, but what it accomplishes
is not rigorously defined. this allows for more flexible
iteration.

## "risk mitigation"

the spiral model is suitable if your project has risks. e.g.
going overbudget, overtime, or failing altogether.

## work breakdown structure

this is more tangible than the waterfall / spiral / etc. models
we break up our project into a series of tasks.
we can break up our tasks into smaller subtasks.
the tasks will eventually reach the point where
evaluating how long it will take to do it.
we will be able to determine how tasks depend on each other.
different people can do different tasks to get it done faster!!

there are two main formats for showing these tasks.
- tabular
  - this shows each task as one row of a table
  - easy to construct, but difficult to read
- graph
  - each activity is shows as either a node or an edge of the graph
  - easier to read, but more difficult to construct

## estimation

time is money, hence it is useful to estimate the duration of
projects.
